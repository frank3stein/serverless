service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  # - serverless-reqvalidator-plugin
  # - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  # deploymentBucket:
  #   name: com.serverless.${self:provider.region}.deploys

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    # IMAGE_ID_INDEX: ImageIdIndex
    IMAGES_S3_BUCKET: serverless-todo-app-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300 # Presigned URL expiration time in seconds
    INDEX_TODO: Index-todo-${self:provider.stage}
    S3_SIGN_URL_ACCESS: $S3_SIGN_URL_ACCESS
    S3_SIGN_URL_SECRET: $S3_SIGN_URL_SECRET
    # CONNECTIONS_TABLE: Connections-${self:provider.stage}
    # AUTH0_SECRET: rn30fTpHrpWc24BqK3I3UAELVavmTOVzNkV1Vw9aKIWZEXU97dJ0xIFbCl0wHfPM

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    # - Effect: Allow
    #   Action:
    #     - s3:PutObject
    #     - s3:GetObject
    #   Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

# custom:
#   topicName: imagesTopic-${self:provider.stage}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # ConnectHandler:
  #   handler: src/lambda/websocket/connect.handler
  #   events:
  #     - websocket:
  #         route: $connect
  #   iamRoleStatementsInherit: true
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:PutItem
  #         - dynamodb:DeleteItem
  #       Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  # DisconnectHandler:
  #   handler: src/lambda/websocket/disconnect.handler
  #   events:
  #     - websocket:
  #         route: $disconnect
  #   iamRoleStatementsInherit: true
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:PutItem
  #         - dynamodb:DeleteItem
  #       Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  # SendUploadNotifications:
  #   handler: src/lambda/s3/sendNotifications.handler
  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      # - Effect: Allow
      #   Action:
      #     - dynamodb:Query
      #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.INDEX_TODO}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          # added
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          # added
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          # added
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::{self:provider.environment.IMAGES_S3_BUCKET}
  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/* # s3:::(three colons)${}, and dont forget the /* at the end
resources:
  Resources:
    # Auth, creating headers for cors
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    # TODO: Add any necessary AWS resources
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          # - AttributeName: createdAt
          #   AttributeType: S
          # - AttributeName: attachmentUrl #indexKey
          #   AttributeType: S
          # - AttributeName: dueDate
          #   AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId # partition key
            KeyType: HASH
          - AttributeName: todoId # sort key. Needs to be RANGE in keySchema
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        # LocalSecondaryIndexes:
        #   - IndexName: ${self:provider.environment.INDEX_TODO}
        #     KeySchema:
        #       - AttributeName: userId #partitionKey
        #         KeyType: HASH
        #       - AttributeName: todoId #indexKey
        #         KeyType: RANGE
        #     Projection:
        #       # NonKeyAttributes: ["todoId"]
        #       ProjectionType: ALL
    # ConnectionsTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: id #partitionKey
    #         AttributeType: S
    #       - AttributeName: timestamp
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: id
    #         KeyType: HASH
    #       - AttributeName: timestamp
    #         KeyType: RANGE
    #     BillingMode: PAY_PER_REQUEST
    #     TableName: ${self:provider.environment.CONNECTIONS_TABLE}
    # ImagesBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     AccessControl: PublicRead
    #     BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
    #     # NotificationConfiguration:
    #     #   LambdaConfigurations:
    #     #     - Event: s3:ObjectCreated:*
    #     #       Functions: !GetAtt SendUploadNotificationsLambdaFunction.Arn
    #     CorsConfiguration:
    #       CorsRules:
    #         - AllowedOrigins:
    #             - "*"
    #           AllowedHeaders:
    #             - "*"
    #           AllowedMethods:
    #             - GET
    #               PUT
    #               POST
    #               DELETE
    #               HEAD
    #           MaxAge: 3000
    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     PolicyDocument:
    #       Id: MyPolicy
    #       Version: "2012-10-17"
    #       Statement:
    #         - Sid: PublicReadForGetBucketObjects
    #           Effect: Allow
    #           Principal: "*"
    #           Action: "s3:GetObject"
    #           Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
    #     Bucket:
    #       Ref: ImagesBucket
    # SendUploadNotificationsPermission:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     FunctionName: SendUploadNotifications
    #     Principal: s3.amazonaws.com
    #     Action: lambda:InvokeFunction
    #     SourceAccount: !Ref AWS::AccountId
    #     SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
