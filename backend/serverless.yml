service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-canary-deployments
  - serverless-plugin-warmup
  - serverless-offline

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  warmup:
    enabled: true # enable for all functions
    name: "warmup"
    payload:
      isWarmup: true
    concurrency: 5 # how many instances to keep running
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGES_S3_BUCKET: serverless-todo-app-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    INDEX_TODO: Index-todo-${self:provider.stage}
    S3_SIGN_URL_ACCESS: $S3_SIGN_URL_ACCESS
    S3_SIGN_URL_SECRET: $S3_SIGN_URL_SECRET

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource: "*"
    ## Warmup permissions
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - Fn::Join:
            - ":"
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function:${self:service}-${opt:stage, self:provider.stage}-*

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # ConnectHandler:
  #   handler: src/lambda/websocket/connect.handler
  #   events:
  #     - websocket:
  #         route: $connect
  #   iamRoleStatementsInherit: true
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:PutItem
  #         - dynamodb:DeleteItem
  #       Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  # DisconnectHandler:
  #   handler: src/lambda/websocket/disconnect.handler
  #   events:
  #     - websocket:
  #         route: $disconnect
  #   iamRoleStatementsInherit: true
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:PutItem
  #         - dynamodb:DeleteItem
  #       Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  # SendUploadNotifications:
  #   handler: src/lambda/s3/sendNotifications.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/create-todo-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/update-todo-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::{self:provider.environment.IMAGES_S3_BUCKET}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/* # s3:::(three colons)${}, and dont forget the /* at the end
resources:
  Resources:
    # Auth, creating headers for cors
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId # partition key
            KeyType: HASH
          - AttributeName: todoId # sort key. Needs to be RANGE in keySchema
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
